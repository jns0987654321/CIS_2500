{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf250
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red196\green26\blue22;\red170\green13\blue145;
\red92\green38\blue153;\red28\green0\blue207;\red63\green110\blue116;\red0\green116\blue0;\red46\green13\blue110;
\red38\green71\blue75;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab560
\pard\tx560\pardeftab560\ql\qnatural\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 #include \cf3 <stdio.h>\cf2 \
#include \cf3 <stdlib.h>\cf2 \
#include \cf3 <ctype.h>\cf2 \
#include \cf3 <string.h>\cf2 \
\cf0 \
\cf4 typedef\cf0  \cf4 struct\cf0  employeeRecord\
\{\
	\cf4 char\cf0  *name;\
	\cf4 char\cf0  *address;\
	\cf4 short\cf0  addressLength, nameLength;\
	\cf4 int\cf0  phoneNumber;\
\}records;\
\
\cf4 int\cf0  main (\cf4 void\cf0 )\
\{	\
	\cf5 FILE\cf0  *fp;\
	\cf4 int\cf0  choice=\cf6 0\cf0 , i;\
	\cf4 int\cf0  maxFileSize;\
	\cf4 int\cf0  recordNum;\
	\cf4 int\cf0  currentFileSize;\
	\cf7 records\cf0  *ptr;\
	\cf7 records\cf0  b;\
	\cf4 char\cf0  *namest;\
	\cf4 char\cf0  *addressst;\
	\cf4 char\cf0  tempName[\cf6 51\cf0 ];\
	\
	\cf4 while\cf0 (choice==\cf6 0\cf0 )\
	\{\
		\cf4 if\cf0  (choice==\cf6 0\cf0 ) \
		\{\
			\cf8 //printf("\\n");\cf0 \
			\cf9 printf\cf0 (\cf3 "\\n1. Enter a new record. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "2. Retrieve a record by name. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "3. Retrieve a record by number. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "4. Exit \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "Enter a number from 1-4: "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &choice);\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
\
		\}\
		\
		\cf4 if\cf0  (choice==\cf6 1\cf0 ) \
		\{	\
			\cf9 getchar\cf0 ();\
			\cf8 //if ( (fp = fopen("employeeRecords.txt", "r+")) == NULL)\cf0 \
			\cf8 //\{\cf0 \
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "ab+"\cf0 );\
			\cf9 printf\cf0 (\cf3 "error!!\\n"\cf0 );\
\
			\cf8 //\}\cf0 \
			\cf8 //else\cf0 \
			\cf8 //\{\cf0 \
			\cf8 //	fp = fopen("employeeRecords", "r+");\cf0 \
			\cf8 //\}\cf0 \
			\
			ptr = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf7 records\cf0 ));\
			ptr->\cf7 name\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			\cf9 printf\cf0 (\cf3 "errroorrrr!!!!!\\n"\cf0 );\
			namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 );\
			\
			\
			\cf9 printf\cf0 (\cf3 "Enter the name:\\n "\cf0 );\
			\cf9 fgets\cf0 (namest, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\cf2 strcpy\cf0 (ptr->\cf7 name\cf0 , namest);\
			ptr->\cf7 nameLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 name\cf0 )+\cf6 1\cf0 ;\
			\
			\cf8 //printf("%d", ptr->nameLength);\cf0 \
			\cf8 //printf("%s", ptr->name);\cf0 \
			\
			ptr->\cf7 address\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			\
			addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 );\
			\
			\cf9 printf\cf0 (\cf3 "Enter the address:\\n "\cf0 );\
			\cf9 fgets\cf0 (addressst, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
\
			\cf2 strcpy\cf0 (ptr->\cf7 address\cf0 , addressst);\
			ptr->\cf7 addressLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 address\cf0 )+\cf6 1\cf0 ;\
			\cf8 //printf("%d", ptr->addressLength);\cf0 \
			\cf8 //printf("%s", ptr->address);\cf0 \
			\
			\cf9 printf\cf0 (\cf3 "Enter the phone number:\\n "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ptr->\cf7 phoneNumber\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
\
			\cf8 //printf("%d", ptr->phoneNumber);\cf0 \
			\
			\
			\cf9 fwrite\cf0 (ptr, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
			\cf9 fseek\cf0 (fp, -\cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf2 SEEK_CUR\cf0 );\
			\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
			\
			\cf8 //addressst = malloc(sizeof(char)*b.addressLength);\cf0 \
			\cf8 //ptr = malloc(sizeof(char)*ptr->addressLength);\cf0 \
			\cf8 //fseek(fp, sizeof(records), SEEK_CUR);\cf0 \
			\cf9 fwrite\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
			\cf9 fwrite\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
		\cf8 //	fclose(fp);\cf0 \
			\
			\cf8 /*\
			fp = fopen("employeeRecords", "ab+");\
			fseek(fp, 0L, SEEK_SET);\
			\
			fread(&b, sizeof(records), 1, fp);\
			fseek(fp, (sizeof(char)*b.nameLength+sizeof(char)*b.addressLength), SEEK_CUR);	\
			\
			fread(namest, sizeof(char)*b.nameLength, 1, fp);\
			fread(addressst, sizeof(char)*b.addressLength, 1, fp);\
			 */\cf0 \
			\
			\
			\cf8 //fread(&b, sizeof(records), 1, fp);\cf0 \
			\
			\cf8 //fread(namest, sizeof(char)*ptr->nameLength, 1, fp);\cf0 \
			\cf8 //fread(addressst, sizeof(char)*ptr->addressLength, 1, fp);\cf0 \
			\
			\cf8 /*\
			strcpy(namest, b.name);			\
			strcpy(addressst, b.address);\
			fclose(fp);\
			printf("%s %s %d\\n", b.name, b.address, b.phoneNumber);\
			printf("%s\\n", namest);\
			printf("%s\\n", addressst);\
			printf("%d\\n", b.nameLength);\
			printf("%d\\n", b.addressLength);\
			 */\cf0 \
			\
			\cf9 printf\cf0 (\cf3 "\\nRecord Stored Successfully!!\\n"\cf0 );\
			\
			\cf9 fclose\cf0 (fp);\
			\
			choice=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (choice==\cf6 2\cf0 ) \
		\{\
			\cf9 getchar\cf0 ();\
			\
			\cf9 printf\cf0 (\cf3 "\\nEnter a name: "\cf0 );\
			\cf9 fgets\cf0 (tempName, \cf6 51\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
\
			\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r+"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
			maxFileSize = \cf9 ftell\cf0 (fp);\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\
			\cf4 while\cf0  (\cf9 ftell\cf0 (fp)!=maxFileSize)\
			\{\
				\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);	\
\
				namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 );\
				addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 );\
				\cf8 //fseek(fp, -sizeof(records), SEEK_CUR);\cf0 \
				\cf8 //fread(&b, sizeof(records), 1, fp);	\cf0 \
				\cf8 //printf("error!!\\n");\cf0 \
				\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
\
				\cf8 //fread(namest, sizeof(char)*b.nameLength, 1, fp);\cf0 \
\
				\cf8 //fread(addressst, sizeof(char)*b.addressLength, 1, fp);\cf0 \
				\cf4 if\cf0  ((\cf9 strcmp\cf0 (namest, tempName)==\cf6 0\cf0 )) \
				\{\
					\cf9 printf\cf0 (\cf3 "\\nMATCH FOUND!!\\n"\cf0 );\
					\cf9 printf\cf0 (\cf3 "Name: %s"\cf0 , namest);\
					\cf9 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
					\cf9 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , b.\cf7 phoneNumber\cf0 );\
					\cf4 break\cf0 ;	\
				\}\
			\}\
			\
			\cf4 if\cf0  ((\cf9 ftell\cf0 (fp)==maxFileSize) && (\cf9 strcmp\cf0 (namest, tempName)!=\cf6 0\cf0 )) \{\
				\cf9 printf\cf0 (\cf3 "\\nMATCH NOT FOUND!!\\n"\cf0 );\
			\}\
			\
			\cf9 fclose\cf0 (fp);\
			\
			choice=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (choice==\cf6 3\cf0 ) \
		\{\
			\cf9 getchar\cf0 ();\
			\
			\cf9 printf\cf0 (\cf3 "\\nEnter a record number: \\n"\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &recordNum);\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
			maxFileSize = \cf9 ftell\cf0 (fp);\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\
			\cf4 for\cf0  (i=\cf6 0\cf0 ; i>recordNum; i++) \
			\{\
				\
			\
			\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);	\
			namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 );\
			addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 );\
			\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
			\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
			\cf9 fseek\cf0 (fp, (+\cf4 sizeof\cf0 (\cf7 records\cf0 )+\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 +\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 ), \cf2 SEEK_SET\cf0 );\
			\}\
			\
			\cf9 printf\cf0 (\cf3 "max %d\\n"\cf0 , maxFileSize);\
			currentFileSize=\cf9 ftell\cf0 (fp);\
			\cf9 printf\cf0 (\cf3 "current %d\\n"\cf0 , currentFileSize);\
			\
			\cf4 if\cf0  (currentFileSize<maxFileSize) \
			\{\
				\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);					\
				\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 printf\cf0 (\cf3 "\\nName: %s"\cf0 , namest);\
				\cf9 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
				\cf9 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , b.\cf7 phoneNumber\cf0 );\
			\}\cf4 else\cf0  \
				\cf9 printf\cf0 (\cf3 "\\nRecord number too large!!\\n"\cf0 );\
			\
			\
			choice=\cf6 0\cf0 ;\
		\}\
		\
	\}\
	ptr = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf7 records\cf0 ));\
	\cf9 free\cf0 (ptr);\
	ptr=\cf4 NULL\cf0 ;\
	\
    \cf4 return\cf0  \cf6 0\cf0 ;\
\}\
\
\
\
\
\cf2 #include \cf3 <stdio.h>\cf2 \
#include \cf3 <stdlib.h>\cf2 \
#include \cf3 <ctype.h>\cf2 \
#include \cf3 <string.h>\cf2 \
\cf0 \
\cf4 typedef\cf0  \cf4 struct\cf0  employeeRecord\
\{\
	\cf4 char\cf0  *name;\
	\cf4 char\cf0  *address;\
	\cf4 short\cf0  addressLength, nameLength;\
	\cf4 int\cf0  phoneNumber;\
\}records;\
\
\cf4 int\cf0  main (\cf4 void\cf0 )\
\{	\
	\cf5 FILE\cf0  *fp;\
	\cf4 int\cf0  choice=\cf6 0\cf0 , i;\
	\cf4 int\cf0  maxFileSize;\
	\cf4 int\cf0  recordNum;\
	\cf4 int\cf0  currentFileSize;\
	\cf7 records\cf0  *ptr;\
	\cf7 records\cf0  b;\
	\cf4 char\cf0  *namest;\
	\cf4 char\cf0  *addressst;\
	\cf4 char\cf0  tempName[\cf6 51\cf0 ];\
	\
	\cf4 while\cf0 (choice==\cf6 0\cf0 )\
	\{\
		\cf4 if\cf0  (choice==\cf6 0\cf0 ) \
		\{\
			\cf9 printf\cf0 (\cf3 "\\n1. Enter a new record. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "2. Retrieve a record by name. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "3. Retrieve a record by number. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "4. Exit \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "Enter a number from 1-4: "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &choice);\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
\
		\}\
		\
		\cf4 if\cf0  (choice==\cf6 1\cf0 ) \
		\{	\
			\cf9 getchar\cf0 ();\
\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "ab+"\cf0 );\
			\cf9 printf\cf0 (\cf3 "error!!\\n"\cf0 );\
\
			ptr = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf7 records\cf0 ));\
			ptr->\cf7 name\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			\cf9 printf\cf0 (\cf3 "errroorrrr!!!!!\\n"\cf0 );\
			namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 );\
			\
			\
			\cf9 printf\cf0 (\cf3 "Enter the name:\\n "\cf0 );\
			\cf9 fgets\cf0 (namest, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\cf2 strcpy\cf0 (ptr->\cf7 name\cf0 , namest);\
			ptr->\cf7 nameLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 name\cf0 )+\cf6 1\cf0 ;\
			\
			ptr->\cf7 address\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			\
			addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 );\
			\
			\cf9 printf\cf0 (\cf3 "Enter the address:\\n "\cf0 );\
			\cf9 fgets\cf0 (addressst, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
\
			\cf2 strcpy\cf0 (ptr->\cf7 address\cf0 , addressst);\
			ptr->\cf7 addressLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 address\cf0 )+\cf6 1\cf0 ;\
			\
			\cf9 printf\cf0 (\cf3 "Enter the phone number:\\n "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ptr->\cf7 phoneNumber\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			\cf9 fwrite\cf0 (ptr, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
			\cf9 fseek\cf0 (fp, -\cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf2 SEEK_CUR\cf0 );\
			\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
			\
			\cf9 fwrite\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
			\cf9 fwrite\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
			\
			\cf9 printf\cf0 (\cf3 "\\nRecord Stored Successfully!!\\n"\cf0 );\
			\
			\cf9 fclose\cf0 (fp);\
			\
			choice=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (choice==\cf6 2\cf0 ) \
		\{\
			\cf9 getchar\cf0 ();\
			\
			\cf9 printf\cf0 (\cf3 "\\nEnter a name: "\cf0 );\
			\cf9 fgets\cf0 (tempName, \cf6 51\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
\
			\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r+"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
			maxFileSize = \cf9 ftell\cf0 (fp);\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\
			\cf4 while\cf0  (\cf9 ftell\cf0 (fp)!=maxFileSize)\
			\{\
				\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);	\
\
				namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 );\
				addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 );\
\
				\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
\
				\cf4 if\cf0  ((\cf9 strcmp\cf0 (namest, tempName)==\cf6 0\cf0 )) \
				\{\
					\cf9 printf\cf0 (\cf3 "\\nMATCH FOUND!!\\n"\cf0 );\
					\cf9 printf\cf0 (\cf3 "Name: %s"\cf0 , namest);\
					\cf9 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
					\cf9 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , b.\cf7 phoneNumber\cf0 );\
					\cf4 break\cf0 ;	\
				\}\
			\}\
			\
			\cf4 if\cf0  ((\cf9 ftell\cf0 (fp)==maxFileSize) && (\cf9 strcmp\cf0 (namest, tempName)!=\cf6 0\cf0 )) \{\
				\cf9 printf\cf0 (\cf3 "\\nMATCH NOT FOUND!!\\n"\cf0 );\
			\}\
			\
			\cf9 fclose\cf0 (fp);\
			\
			choice=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (choice==\cf6 3\cf0 ) \
		\{\
			\cf9 getchar\cf0 ();\
			\
			\cf9 printf\cf0 (\cf3 "\\nEnter a record number: \\n"\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &recordNum);\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
			maxFileSize = \cf9 ftell\cf0 (fp);\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\
			\cf4 for\cf0  (i=\cf6 2\cf0 ; recordNum>=i; i++) \
			\{\
				\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);	\
				\
				namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 );\
				addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 );\
				\
				\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
			\}\
			\
			\cf9 printf\cf0 (\cf3 "max %d\\n"\cf0 , maxFileSize);\
			currentFileSize=\cf9 ftell\cf0 (fp);\
			\cf9 printf\cf0 (\cf3 "current %d\\n"\cf0 , currentFileSize);\
			\
			\cf4 if\cf0  (currentFileSize<maxFileSize) \
			\{\
				\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);					\
				\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 printf\cf0 (\cf3 "\\nName: %s"\cf0 , namest);\
				\cf9 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
				\cf9 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , b.\cf7 phoneNumber\cf0 );\
			\}\cf4 else\cf0  \
				\cf9 printf\cf0 (\cf3 "\\nRecord number too large!!\\n"\cf0 );\
			\
			choice=\cf6 0\cf0 ;\
		\}\
		\
	\}\
	\
	\cf9 free\cf0 (namest);\
	\cf8 //ptr=NULL;\cf0 \
	\
    \cf4 return\cf0  \cf6 0\cf0 ;\
\}\
\
\
\cf2 #include \cf3 <stdio.h>\cf2 \
#include \cf3 <stdlib.h>\cf2 \
#include \cf3 <ctype.h>\cf2 \
#include \cf3 <string.h>\cf2 \
\cf0 \
\cf4 typedef\cf0  \cf4 struct\cf0  employeeRecord\
\{\
	\cf4 char\cf0  *name;\
	\cf4 char\cf0  *address;\
	\cf4 short\cf0  addressLength, nameLength;\
	\cf4 int\cf0  phoneNumber;\
\}records;\
\
\cf4 int\cf0  main (\cf4 void\cf0 )\
\{	\
	\cf5 FILE\cf0  *fp;\
	\cf4 int\cf0  ch=\cf6 0\cf0 , i;\
	\cf4 int\cf0  choices=\cf6 0\cf0 ;\
	\cf4 int\cf0  isAllocated;\
	\cf4 int\cf0  maxFileSize;\
	\cf4 int\cf0  recordNum;\
	\cf4 int\cf0  currentFileSize;\
	\cf7 records\cf0  *ptr;\
	\cf7 records\cf0  b;\
	\cf4 char\cf0  *namest;\
	\cf4 char\cf0  *addressst;\
	\cf4 char\cf0  tempName[\cf6 51\cf0 ];\
	\
	\cf4 while\cf0 (ch==\cf6 0\cf0 )\
	\{\
		\cf4 if\cf0  (ch==\cf6 0\cf0 ) \
		\{\
			\cf9 printf\cf0 (\cf3 "\\n1. Enter a new record. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "2. Retrieve a record by name. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "3. Retrieve a record by number. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "4. Exit \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "Enter a number from 1-4: "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ch);\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 1\cf0 ) \
		\{	\
			\cf9 getchar\cf0 ();\
			\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "ab+"\cf0 );\
			\
			ptr = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf7 records\cf0 ));\
			ptr->\cf7 name\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 );\
			\
			\
			\cf9 printf\cf0 (\cf3 "Enter the name:\\n "\cf0 );\
			\cf9 fgets\cf0 (namest, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\cf2 strcpy\cf0 (ptr->\cf7 name\cf0 , namest);\
			ptr->\cf7 nameLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 name\cf0 )+\cf6 1\cf0 ;\
			\
			ptr->\cf7 address\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			\
			addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 );\
			\
			\cf9 printf\cf0 (\cf3 "Enter the address:\\n "\cf0 );\
			\cf9 fgets\cf0 (addressst, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			\cf2 strcpy\cf0 (ptr->\cf7 address\cf0 , addressst);\
			ptr->\cf7 addressLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 address\cf0 )+\cf6 1\cf0 ;\
			\
			\cf9 printf\cf0 (\cf3 "Enter the phone number:\\n "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ptr->\cf7 phoneNumber\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			\cf9 fwrite\cf0 (ptr, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
			\cf9 fseek\cf0 (fp, -\cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf2 SEEK_CUR\cf0 );\
			\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
			\
			\cf9 fwrite\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
			\cf9 fwrite\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
			\
			\cf9 printf\cf0 (\cf3 "\\nRecord Stored Successfully!!\\n"\cf0 );\
			\
			\cf9 fclose\cf0 (fp);\
			\
			choices++;\
			isAllocated=\cf6 1\cf0 ;\
			ch=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 2\cf0 ) \
		\{\
			\cf9 getchar\cf0 ();\
			\
			\cf9 printf\cf0 (\cf3 "\\nEnter a name: "\cf0 );\
			\cf9 fgets\cf0 (tempName, \cf6 51\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r+"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
			maxFileSize = \cf9 ftell\cf0 (fp);\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\
			\cf4 while\cf0  (\cf9 ftell\cf0 (fp)!=maxFileSize)\
			\{\
				\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);	\
				\
				namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 );\
				addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 );\
				\
				\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
				\
				\cf4 if\cf0  ((\cf9 strcmp\cf0 (namest, tempName)==\cf6 0\cf0 )) \
				\{\
					\cf9 printf\cf0 (\cf3 "\\nMATCH FOUND!!\\n"\cf0 );\
					\cf9 printf\cf0 (\cf3 "Name: %s"\cf0 , namest);\
					\cf9 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
					\cf9 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , b.\cf7 phoneNumber\cf0 );\
					\cf4 break\cf0 ;	\
				\}\
			\}\
			\
			\cf4 if\cf0  ((\cf9 ftell\cf0 (fp)==maxFileSize) && (\cf9 strcmp\cf0 (namest, tempName)!=\cf6 0\cf0 )) \{\
				\cf9 printf\cf0 (\cf3 "\\nMATCH NOT FOUND!!\\n"\cf0 );\
			\}\
			\
			\cf9 fclose\cf0 (fp);\
			\
			choices++;\
			ch=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 3\cf0 ) \
		\{\
			\cf9 getchar\cf0 ();\
			\
			\cf9 printf\cf0 (\cf3 "\\nEnter a record number: \\n"\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &recordNum);\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
			maxFileSize = \cf9 ftell\cf0 (fp);\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\
			\cf4 for\cf0  (i=\cf6 1\cf0 ; i<recordNum; i++) \
			\{\
				\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);	\
				\cf9 fseek\cf0 (fp, +b.\cf7 nameLength\cf0 +b.\cf7 addressLength\cf0 , \cf2 SEEK_CUR\cf0 );\
			\}\
			\
			currentFileSize=\cf9 ftell\cf0 (fp);\
			\
			\cf4 if\cf0  (currentFileSize<maxFileSize) \
			\{\
				\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);		\
				\
				namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 );\
				addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 );\
				\
				\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 printf\cf0 (\cf3 "\\nName: %s"\cf0 , namest);\
				\cf9 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
				\cf9 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , b.\cf7 phoneNumber\cf0 );\
			\}\cf4 else\cf0  \
				\cf9 printf\cf0 (\cf3 "\\nRecord number too large!!\\n"\cf0 );\
			\
			choices++;\
			ch=\cf6 0\cf0 ;\
		\}\
		\
	\}\
	\
	\
	\cf4 if\cf0  (choices>=\cf6 1\cf0 ) \
	\{\
		\cf9 free\cf0 (namest);\
		\cf9 free\cf0 (addressst);\
		\cf4 if\cf0  (isAllocated==\cf6 1\cf0 ) \
		\{\
			\cf9 free\cf0 (ptr->\cf7 name\cf0 );\
			\cf9 free\cf0 (ptr->\cf7 address\cf0 );\
			\cf9 free\cf0 (ptr);\
		\}\
	\}\
	 \
	\
    \cf4 return\cf0  \cf6 0\cf0 ;\
\}\
\
\
\
\
\cf2 #include \cf3 <stdio.h>\cf2 \
#include \cf3 <stdlib.h>\cf2 \
#include \cf3 <ctype.h>\cf2 \
#include \cf3 <string.h>\cf2 \
\cf0 \
\cf4 typedef\cf0  \cf4 struct\cf0  employeeRecord\
\{\
	\cf4 char\cf0  *name;\
	\cf4 char\cf0  *address;\
	\cf4 short\cf0  addressLength, nameLength;\
	\cf4 int\cf0  phoneNumber;\
\}records;\
\
\cf4 int\cf0  main (\cf4 void\cf0 )\
\{	\
	\cf5 FILE\cf0  *fp;\
	\cf4 int\cf0  ch=\cf6 0\cf0 , i;\
	\cf4 int\cf0  choices=\cf6 0\cf0 ;\
	\cf4 int\cf0  isAllocated;\
	\cf4 int\cf0  maxFileSize;\
	\cf4 int\cf0  recordNum;\
	\cf4 int\cf0  currentFileSize;\
	\cf7 records\cf0  *ptr;\
	\cf7 records\cf0  tempStruct;\
	\cf4 char\cf0  *namest;\
	\cf4 char\cf0  *addressst;\
	\cf4 char\cf0  tempName[\cf6 51\cf0 ];\
	\
	\cf4 while\cf0 (ch==\cf6 0\cf0 )\
	\{\
		\cf4 if\cf0  (ch==\cf6 0\cf0 ) \
		\{\
			\cf9 printf\cf0 (\cf3 "\\n1. Enter a new record. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "2. Retrieve a record by name. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "3. Retrieve a record by number. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "4. Exit \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "Enter a number from 1-4: "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ch);\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 1\cf0 ) \
		\{	\
			\cf9 getchar\cf0 ();\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "ab+"\cf0 );\
			\
			ptr = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf7 records\cf0 ));\
			ptr->\cf7 name\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 nameLength\cf0 );\
			\
			\cf9 printf\cf0 (\cf3 "Enter the name:\\n "\cf0 );\
			\cf9 fgets\cf0 (namest, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\cf2 strcpy\cf0 (ptr->\cf7 name\cf0 , namest);\
			ptr->\cf7 nameLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 name\cf0 )+\cf6 1\cf0 ;\
			\
			ptr->\cf7 address\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 addressLength\cf0 );\
			\cf9 printf\cf0 (\cf3 "Enter the address:\\n "\cf0 );\
			\cf9 fgets\cf0 (addressst, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\cf2 strcpy\cf0 (ptr->\cf7 address\cf0 , addressst);\
			ptr->\cf7 addressLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 address\cf0 )+\cf6 1\cf0 ;\
			\
			\cf9 printf\cf0 (\cf3 "Enter the phone number:\\n "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ptr->\cf7 phoneNumber\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			\cf9 fwrite\cf0 (ptr, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
			\cf9 fseek\cf0 (fp, -\cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf2 SEEK_CUR\cf0 );\
			\cf9 fread\cf0 (&tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
			\cf9 fwrite\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
			\cf9 fwrite\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
			\
			\cf9 printf\cf0 (\cf3 "\\nRecord Stored Successfully!!\\n"\cf0 );\
			\
			\cf9 fclose\cf0 (fp);\
			choices=choices+\cf6 1\cf0 ;\
			isAllocated=\cf6 1\cf0 ;\
			ch=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 2\cf0 ) \
		\{\
			\cf9 getchar\cf0 ();\
			\
			\cf9 printf\cf0 (\cf3 "\\nEnter a name: "\cf0 );\
			\cf9 fgets\cf0 (tempName, \cf6 51\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r+"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
			maxFileSize = \cf9 ftell\cf0 (fp);\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\
			\cf4 while\cf0  (\cf9 ftell\cf0 (fp)!=maxFileSize)\
			\{\
				\cf9 fread\cf0 (&tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);	\
				namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 nameLength\cf0 );\
				addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 addressLength\cf0 );\
				\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
				\
				\cf4 if\cf0  ((\cf9 strcmp\cf0 (namest, tempName)==\cf6 0\cf0 )) \
				\{\
					\cf9 printf\cf0 (\cf3 "\\nMATCH FOUND!!\\n"\cf0 );\
					\cf9 printf\cf0 (\cf3 "Name: %s"\cf0 , namest);\
					\cf9 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
					\cf9 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , tempStruct.\cf7 phoneNumber\cf0 );\
					\cf4 break\cf0 ;	\
				\}\
			\}\
			\
			\cf4 if\cf0  ((\cf9 ftell\cf0 (fp)==maxFileSize) && (\cf9 strcmp\cf0 (namest, tempName)!=\cf6 0\cf0 )) \{\
				\cf9 printf\cf0 (\cf3 "\\nMATCH NOT FOUND!!\\n"\cf0 );\
			\}\
			\
			\cf9 fclose\cf0 (fp);\
			choices=choices+\cf6 1\cf0 ;\
			ch=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 3\cf0 ) \
		\{\
			\cf9 getchar\cf0 ();\
			\
			\cf9 printf\cf0 (\cf3 "\\nEnter a record number: \\n"\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &recordNum);\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
			maxFileSize = \cf9 ftell\cf0 (fp);\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\
			\cf4 for\cf0  (i=\cf6 1\cf0 ; i<recordNum; i++) \
			\{\
				\cf9 fread\cf0 (&tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);	\
				\cf9 fseek\cf0 (fp, +tempStruct.\cf7 nameLength\cf0 +tempStruct.\cf7 addressLength\cf0 , \cf2 SEEK_CUR\cf0 );\
			\}\
			\
			currentFileSize=\cf9 ftell\cf0 (fp);\
			\
			\cf4 if\cf0  (currentFileSize<maxFileSize) \
			\{\
				\cf9 fread\cf0 (&tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);		\
				namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 nameLength\cf0 );\
				addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 addressLength\cf0 );\
				\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
				\
				\cf9 printf\cf0 (\cf3 "\\nName: %s"\cf0 , namest);\
				\cf9 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
				\cf9 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , tempStruct.\cf7 phoneNumber\cf0 );\
				\
			\}\cf4 else\cf0  \
				\cf9 printf\cf0 (\cf3 "\\nRecord number too large!!\\n"\cf0 );\
			\
			\cf9 fclose\cf0 (fp);\
			choices=choices+\cf6 1\cf0 ;\
			ch=\cf6 0\cf0 ;\
		\}\
	\}\
	\
	\cf4 if\cf0  (choices>=\cf6 1\cf0 ) \
	\{\
		\cf9 free\cf0 (namest);\
		\cf9 free\cf0 (addressst);\
		\
		\cf4 if\cf0  (isAllocated==\cf6 1\cf0 ) \
		\{\
			\cf9 free\cf0 (ptr->\cf7 name\cf0 );\
			\cf9 free\cf0 (ptr->\cf7 address\cf0 );\
			\cf9 free\cf0 (ptr);\
		\}\
	\}\
	\
    \cf4 return\cf0  \cf6 0\cf0 ;\
\}\
\
\
\
\
\
\
\cf2 #include \cf3 <stdio.h>\cf2 \
#include \cf3 <stdlib.h>\cf2 \
#include \cf3 <ctype.h>\cf2 \
#include \cf3 <string.h>\cf2 \
\cf0 \
\cf4 typedef\cf0  \cf4 struct\cf0  employeeRecord\
\{\
	\cf4 char\cf0  *name;\
	\cf4 char\cf0  *address;\
	\cf4 short\cf0  addressLength, nameLength;\
	\cf4 int\cf0  phoneNumber;\
\}records;\
\
\cf4 void\cf0  choice1(\cf7 records\cf0  *ptr, \cf5 FILE\cf0  *fp, \cf7 records\cf0  *tempStruct, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst);\
\
\cf4 int\cf0  main (\cf4 void\cf0 )\
\{	\
	\cf5 FILE\cf0  *fp;\
	\cf4 int\cf0  ch=\cf6 0\cf0 , i;\
	\cf4 int\cf0  choices=\cf6 0\cf0 ;\
	\cf4 int\cf0  isAllocated;\
	\cf4 int\cf0  maxFileSize;\
	\cf4 int\cf0  recordNum;\
	\cf4 int\cf0  currentFileSize;\
	\cf7 records\cf0  *ptr;\
	\cf7 records\cf0  tempStruct;\
	\cf4 char\cf0  *namest;\
	\cf4 char\cf0  *addressst;\
	\cf4 char\cf0  tempName[\cf6 51\cf0 ];\
	\
	\cf4 while\cf0 (ch==\cf6 0\cf0 )\
	\{\
		\cf4 if\cf0  (ch==\cf6 0\cf0 ) \
		\{\
			\cf9 printf\cf0 (\cf3 "\\n1. Enter a new record. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "2. Retrieve a record by name. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "3. Retrieve a record by number. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "4. Exit \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "Enter a number from 1-4: "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ch);\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 1\cf0 ) \
		\{	\
			\cf9 getchar\cf0 ();\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "ab+"\cf0 );\
			\
			ptr = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf7 records\cf0 ));\
			ptr->\cf7 name\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 nameLength\cf0 );\
			\
			\cf9 printf\cf0 (\cf3 "Enter the name:\\n "\cf0 );\
			\cf9 fgets\cf0 (namest, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\cf2 strcpy\cf0 (ptr->\cf7 name\cf0 , namest);\
			ptr->\cf7 nameLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 name\cf0 )+\cf6 1\cf0 ;\
			\
			ptr->\cf7 address\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 addressLength\cf0 );\
			\cf9 printf\cf0 (\cf3 "Enter the address:\\n "\cf0 );\
			\cf9 fgets\cf0 (addressst, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\cf2 strcpy\cf0 (ptr->\cf7 address\cf0 , addressst);\
			ptr->\cf7 addressLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 address\cf0 )+\cf6 1\cf0 ;\
			\
			\cf9 printf\cf0 (\cf3 "Enter the phone number:\\n "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ptr->\cf7 phoneNumber\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			\cf10 choice1\cf0 (ptr, fp, &tempStruct, namest, addressst);\
						\
			\cf9 printf\cf0 (\cf3 "\\nRecord Stored Successfully!!\\n"\cf0 );\
			\
			\cf9 fclose\cf0 (fp);\
			choices=choices+\cf6 1\cf0 ;\
			isAllocated=\cf6 1\cf0 ;\
			ch=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 2\cf0 ) \
		\{\
			\cf9 getchar\cf0 ();\
			\
			\cf9 printf\cf0 (\cf3 "\\nEnter a name: "\cf0 );\
			\cf9 fgets\cf0 (tempName, \cf6 51\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r+"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
			maxFileSize = \cf9 ftell\cf0 (fp);\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\
			\cf4 while\cf0  (\cf9 ftell\cf0 (fp)!=maxFileSize)\
			\{\
				\cf9 fread\cf0 (&tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);	\
				namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 nameLength\cf0 );\
				addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 addressLength\cf0 );\
				\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
				\
				\cf4 if\cf0  ((\cf9 strcmp\cf0 (namest, tempName)==\cf6 0\cf0 )) \
				\{\
					\cf9 printf\cf0 (\cf3 "\\nMATCH FOUND!!\\n"\cf0 );\
					\cf9 printf\cf0 (\cf3 "Name: %s"\cf0 , namest);\
					\cf9 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
					\cf9 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , tempStruct.\cf7 phoneNumber\cf0 );\
					\cf4 break\cf0 ;	\
				\}\
			\}\
			\
			\cf4 if\cf0  ((\cf9 ftell\cf0 (fp)==maxFileSize) && (\cf9 strcmp\cf0 (namest, tempName)!=\cf6 0\cf0 )) \{\
				\cf9 printf\cf0 (\cf3 "\\nMATCH NOT FOUND!!\\n"\cf0 );\
			\}\
			\
			\cf9 fclose\cf0 (fp);\
			choices=choices+\cf6 1\cf0 ;\
			ch=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 3\cf0 ) \
		\{\
			\cf9 getchar\cf0 ();\
			\
			\cf9 printf\cf0 (\cf3 "\\nEnter a record number: \\n"\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &recordNum);\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
			maxFileSize = \cf9 ftell\cf0 (fp);\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\
			\cf4 for\cf0  (i=\cf6 1\cf0 ; i<recordNum; i++) \
			\{\
				\cf9 fread\cf0 (&tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);	\
				\cf9 fseek\cf0 (fp, +tempStruct.\cf7 nameLength\cf0 +tempStruct.\cf7 addressLength\cf0 , \cf2 SEEK_CUR\cf0 );\
			\}\
			\
			currentFileSize=\cf9 ftell\cf0 (fp);\
			\
			\cf4 if\cf0  (currentFileSize<maxFileSize) \
			\{\
				\cf9 fread\cf0 (&tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);		\
				namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 nameLength\cf0 );\
				addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 addressLength\cf0 );\
				\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
				\
				\cf9 printf\cf0 (\cf3 "\\nName: %s"\cf0 , namest);\
				\cf9 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
				\cf9 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , tempStruct.\cf7 phoneNumber\cf0 );\
				\
			\}\cf4 else\cf0  \
				\cf9 printf\cf0 (\cf3 "\\nRecord number too large!!\\n"\cf0 );\
			\
			\cf9 fclose\cf0 (fp);\
			choices=choices+\cf6 1\cf0 ;\
			ch=\cf6 0\cf0 ;\
		\}\
	\}\
	\
	\cf4 if\cf0  (choices>=\cf6 1\cf0 ) \
	\{\
		\cf9 free\cf0 (namest);\
		\cf9 free\cf0 (addressst);\
		\
		\cf4 if\cf0  (isAllocated==\cf6 1\cf0 ) \
		\{\
			\cf9 free\cf0 (ptr->\cf7 name\cf0 );\
			\cf9 free\cf0 (ptr->\cf7 address\cf0 );\
			\cf9 free\cf0 (ptr);\
		\}\
	\}\
	\
    \cf4 return\cf0  \cf6 0\cf0 ;\
\}\
\
\cf4 void\cf0  choice1(\cf7 records\cf0  *ptr, \cf5 FILE\cf0  *fp, \cf7 records\cf0  *tempStruct, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst)\
\{\
	\cf9 fwrite\cf0 (ptr, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
	\cf9 fseek\cf0 (fp, -\cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf2 SEEK_CUR\cf0 );\
	\cf9 fread\cf0 (tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
	\cf9 fwrite\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
	\cf9 fwrite\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
	\
\}\
\
\
\
\
\
\cf2 #include \cf3 <stdio.h>\cf2 \
#include \cf3 <stdlib.h>\cf2 \
#include \cf3 <ctype.h>\cf2 \
#include \cf3 <string.h>\cf2 \
\cf0 \
\cf4 typedef\cf0  \cf4 struct\cf0  employeeRecord\
\{\
	\cf4 char\cf0  *name;\
	\cf4 char\cf0  *address;\
	\cf4 short\cf0  addressLength, nameLength;\
	\cf4 int\cf0  phoneNumber;\
\}records;\
\
\cf4 void\cf0  choice1(\cf7 records\cf0  *ptr, \cf5 FILE\cf0  *fp, \cf7 records\cf0  *tempStruct, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst);\
\cf4 void\cf0  choice2(\cf5 FILE\cf0  *fp, \cf4 int\cf0  *maxFileSize, \cf7 records\cf0  *tempStruct, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst, \cf4 char\cf0  tempName[\cf6 51\cf0 ]);\
\
\cf4 int\cf0  main (\cf4 void\cf0 )\
\{	\
	\cf5 FILE\cf0  *fp;\
	\cf4 int\cf0  ch=\cf6 0\cf0 , i;\
	\cf4 int\cf0  choices=\cf6 0\cf0 ;\
	\cf4 int\cf0  isAllocated;\
	\cf4 int\cf0  maxFileSize;\
	\cf4 int\cf0  recordNum;\
	\cf4 int\cf0  currentFileSize;\
	\cf7 records\cf0  *ptr;\
	\cf7 records\cf0  tempStruct;\
	\cf4 char\cf0  *namest;\
	\cf4 char\cf0  *addressst;\
	\cf4 char\cf0  tempName[\cf6 51\cf0 ];\
	\
	\cf4 while\cf0 (ch==\cf6 0\cf0 )\
	\{\
		\cf4 if\cf0  (ch==\cf6 0\cf0 ) \
		\{\
			\cf9 printf\cf0 (\cf3 "\\n1. Enter a new record. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "2. Retrieve a record by name. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "3. Retrieve a record by number. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "4. Exit \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "Enter a number from 1-4: "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ch);\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 1\cf0 ) \
		\{	\
			\cf9 getchar\cf0 ();\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "ab+"\cf0 );\
			\
			ptr = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf7 records\cf0 ));\
			ptr->\cf7 name\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 nameLength\cf0 );\
			\
			\cf9 printf\cf0 (\cf3 "Enter the name:\\n "\cf0 );\
			\cf9 fgets\cf0 (namest, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\cf2 strcpy\cf0 (ptr->\cf7 name\cf0 , namest);\
			ptr->\cf7 nameLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 name\cf0 )+\cf6 1\cf0 ;\
			\
			ptr->\cf7 address\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 addressLength\cf0 );\
			\cf9 printf\cf0 (\cf3 "Enter the address:\\n "\cf0 );\
			\cf9 fgets\cf0 (addressst, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\cf2 strcpy\cf0 (ptr->\cf7 address\cf0 , addressst);\
			ptr->\cf7 addressLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 address\cf0 )+\cf6 1\cf0 ;\
			\
			\cf9 printf\cf0 (\cf3 "Enter the phone number:\\n "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ptr->\cf7 phoneNumber\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			\cf10 choice1\cf0 (ptr, fp, &tempStruct, namest, addressst);\
						\
			\cf9 printf\cf0 (\cf3 "\\nRecord Stored Successfully!!\\n"\cf0 );\
			\
			\cf9 fclose\cf0 (fp);\
			choices=choices+\cf6 1\cf0 ;\
			isAllocated=\cf6 1\cf0 ;\
			ch=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 2\cf0 ) \
		\{\
			\cf9 getchar\cf0 ();\
			\
			\cf9 printf\cf0 (\cf3 "\\nEnter a name: "\cf0 );\
			\cf9 fgets\cf0 (tempName, \cf6 51\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r+"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
			maxFileSize = \cf9 ftell\cf0 (fp);\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\
			\cf10 choice2\cf0 (fp, &maxFileSize, &tempStruct, namest, addressst, tempName);\
						\
			\cf9 fclose\cf0 (fp);\
			choices=choices+\cf6 1\cf0 ;\
			ch=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 3\cf0 ) \
		\{\
			\cf9 getchar\cf0 ();\
			\
			\cf9 printf\cf0 (\cf3 "\\nEnter a record number: \\n"\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &recordNum);\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
			maxFileSize = \cf9 ftell\cf0 (fp);\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\
			\cf4 for\cf0  (i=\cf6 1\cf0 ; i<recordNum; i++) \
			\{\
				\cf9 fread\cf0 (&tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);	\
				\cf9 fseek\cf0 (fp, +tempStruct.\cf7 nameLength\cf0 +tempStruct.\cf7 addressLength\cf0 , \cf2 SEEK_CUR\cf0 );\
			\}\
			\
			currentFileSize=\cf9 ftell\cf0 (fp);\
			\
			\cf4 if\cf0  (currentFileSize<maxFileSize) \
			\{\
				\cf9 fread\cf0 (&tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);		\
				namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 nameLength\cf0 );\
				addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 addressLength\cf0 );\
				\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
				\
				\cf9 printf\cf0 (\cf3 "\\nName: %s"\cf0 , namest);\
				\cf9 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
				\cf9 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , tempStruct.\cf7 phoneNumber\cf0 );\
				\
			\}\cf4 else\cf0  \
				\cf9 printf\cf0 (\cf3 "\\nRecord number too large!!\\n"\cf0 );\
			\
			\cf9 fclose\cf0 (fp);\
			choices=choices+\cf6 1\cf0 ;\
			ch=\cf6 0\cf0 ;\
		\}\
	\}\
	\
	\cf4 if\cf0  (choices>=\cf6 1\cf0 ) \
	\{\
		\cf9 free\cf0 (namest);\
		\cf9 free\cf0 (addressst);\
		\
		\cf4 if\cf0  (isAllocated==\cf6 1\cf0 ) \
		\{\
			\cf9 free\cf0 (ptr->\cf7 name\cf0 );\
			\cf9 free\cf0 (ptr->\cf7 address\cf0 );\
			\cf9 free\cf0 (ptr);\
		\}\
	\}\
	\
    \cf4 return\cf0  \cf6 0\cf0 ;\
\}\
\
\cf4 void\cf0  choice1(\cf7 records\cf0  *ptr, \cf5 FILE\cf0  *fp, \cf7 records\cf0  *tempStruct, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst)\
\{\
	\cf9 fwrite\cf0 (ptr, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
	\cf9 fseek\cf0 (fp, -\cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf2 SEEK_CUR\cf0 );\
	\cf9 fread\cf0 (tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
	\cf9 fwrite\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
	\cf9 fwrite\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
	\
\}\
\
\cf4 void\cf0  choice2(\cf5 FILE\cf0  *fp, \cf4 int\cf0  *maxFileSize, \cf7 records\cf0  *tempStruct, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst, \cf4 char\cf0  tempName[\cf6 51\cf0 ])\
\{\
	\cf4 while\cf0  (\cf9 ftell\cf0 (fp)!=*maxFileSize)\
	\{\
		\cf9 fread\cf0 (tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);	\
		namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 nameLength\cf0 );\
		addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 addressLength\cf0 );\
		\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
		\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
		\
		\cf4 if\cf0  ((\cf9 strcmp\cf0 (namest, tempName)==\cf6 0\cf0 )) \
		\{\
			\cf9 printf\cf0 (\cf3 "\\nMATCH FOUND!!\\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "Name: %s"\cf0 , namest);\
			\cf9 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
			\cf9 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , tempStruct->\cf7 phoneNumber\cf0 );\
			\cf4 break\cf0 ;	\
		\}\
	\}\
	\
	\cf4 if\cf0  ((\cf9 ftell\cf0 (fp)==*maxFileSize) && (\cf9 strcmp\cf0 (namest, tempName)!=\cf6 0\cf0 )) \
	\{\
		\cf9 printf\cf0 (\cf3 "\\nMATCH NOT FOUND!!\\n"\cf0 );\
	\}	\
	\
\}\
\
\
\
\cf2 #include \cf3 <stdio.h>\cf2 \
#include \cf3 <stdlib.h>\cf2 \
#include \cf3 <ctype.h>\cf2 \
#include \cf3 <string.h>\cf2 \
\cf0 \
\cf4 typedef\cf0  \cf4 struct\cf0  employeeRecord\
\{\
	\cf4 char\cf0  *name;\
	\cf4 char\cf0  *address;\
	\cf4 short\cf0  addressLength, nameLength;\
	\cf4 int\cf0  phoneNumber;\
\}records;\
\
\cf4 void\cf0  choice1(\cf7 records\cf0  *ptr, \cf5 FILE\cf0  *fp, \cf7 records\cf0  *tempStruct, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst);\
\cf4 void\cf0  choice2(\cf5 FILE\cf0  *fp, \cf4 int\cf0  *maxFileSize, \cf7 records\cf0  *tempStruct, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst, \cf4 char\cf0  tempName[\cf6 51\cf0 ]);\
\cf4 void\cf0  choice3(\cf4 int\cf0  i, \cf4 int\cf0  *recordNum, \cf7 records\cf0  *tempStruct, \cf5 FILE\cf0  *fp, \cf4 int\cf0  *currentFileSize, \cf4 int\cf0  *maxFileSize, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst);\
\
\cf4 int\cf0  main (\cf4 void\cf0 )\
\{	\
	\cf5 FILE\cf0  *fp;\
	\cf4 int\cf0  ch=\cf6 0\cf0 ; \
	\cf4 int\cf0  i;\
	\cf4 int\cf0  choices=\cf6 0\cf0 ;\
	\cf4 int\cf0  isAllocated;\
	\cf4 int\cf0  maxFileSize;\
	\cf4 int\cf0  recordNum;\
	\cf4 int\cf0  currentFileSize;\
	\cf7 records\cf0  *ptr;\
	\cf7 records\cf0  tempStruct;\
	\cf4 char\cf0  *namest;\
	\cf4 char\cf0  *addressst;\
	\cf4 char\cf0  tempName[\cf6 51\cf0 ];\
	\
	\cf4 while\cf0 (ch==\cf6 0\cf0 )\
	\{\
		\cf4 if\cf0  (ch==\cf6 0\cf0 ) \
		\{\
			\cf9 printf\cf0 (\cf3 "\\n1. Enter a new record. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "2. Retrieve a record by name. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "3. Retrieve a record by number. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "4. Exit \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "Enter a number from 1-4: "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ch);\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 1\cf0 ) \
		\{	\
			\cf9 getchar\cf0 ();\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "ab+"\cf0 );\
			\
			ptr = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf7 records\cf0 ));\
			ptr->\cf7 name\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 nameLength\cf0 );\
			\
			\cf9 printf\cf0 (\cf3 "Enter the name:\\n "\cf0 );\
			\cf9 fgets\cf0 (namest, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\cf2 strcpy\cf0 (ptr->\cf7 name\cf0 , namest);\
			ptr->\cf7 nameLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 name\cf0 )+\cf6 1\cf0 ;\
			\
			ptr->\cf7 address\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 addressLength\cf0 );\
			\cf9 printf\cf0 (\cf3 "Enter the address:\\n "\cf0 );\
			\cf9 fgets\cf0 (addressst, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\cf2 strcpy\cf0 (ptr->\cf7 address\cf0 , addressst);\
			ptr->\cf7 addressLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 address\cf0 )+\cf6 1\cf0 ;\
			\
			\cf9 printf\cf0 (\cf3 "Enter the phone number:\\n "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ptr->\cf7 phoneNumber\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			\cf10 choice1\cf0 (ptr, fp, &tempStruct, namest, addressst);\
			\
			\cf9 printf\cf0 (\cf3 "\\nRecord Stored Successfully!!\\n"\cf0 );\
			\
			\cf9 fclose\cf0 (fp);\
			choices=choices+\cf6 1\cf0 ;\
			isAllocated=\cf6 1\cf0 ;\
			ch=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 2\cf0 ) \
		\{\
			\cf9 getchar\cf0 ();\
			\
			\cf9 printf\cf0 (\cf3 "\\nEnter a name: "\cf0 );\
			\cf9 fgets\cf0 (tempName, \cf6 51\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r+"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
			maxFileSize = \cf9 ftell\cf0 (fp);\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\
			\cf10 choice2\cf0 (fp, &maxFileSize, &tempStruct, namest, addressst, tempName);\
						\
			\cf9 fclose\cf0 (fp);\
			choices=choices+\cf6 1\cf0 ;\
			ch=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 3\cf0 ) \
		\{\
			\cf9 getchar\cf0 ();\
			\
			\cf9 printf\cf0 (\cf3 "\\nEnter a record number: \\n"\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &recordNum);\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
			maxFileSize = \cf9 ftell\cf0 (fp);\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\
			\cf10 choice3\cf0 (i, &recordNum, &tempStruct, fp, &currentFileSize, &maxFileSize, namest, addressst);\
			\
			\cf9 fclose\cf0 (fp);\
			choices=choices+\cf6 1\cf0 ;\
			ch=\cf6 0\cf0 ;\
		\}\
	\}\
	\
	\cf4 if\cf0  (choices>=\cf6 1\cf0 ) \
	\{\
		namest=\cf4 NULL\cf0 ;\
		addressst=\cf4 NULL\cf0 ;\
		\
		\cf4 if\cf0  (isAllocated==\cf6 1\cf0 ) \
		\{\
			\cf9 free\cf0 (ptr->\cf7 name\cf0 );\
			\cf9 free\cf0 (ptr->\cf7 address\cf0 );\
			\cf9 free\cf0 (ptr);\
		\}\
	\}\
	\
    \cf4 return\cf0  \cf6 0\cf0 ;\
\}\
\
\cf4 void\cf0  choice1(\cf7 records\cf0  *ptr, \cf5 FILE\cf0  *fp, \cf7 records\cf0  *tempStruct, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst)\
\{\
	\cf9 fwrite\cf0 (ptr, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
	\cf9 fseek\cf0 (fp, -\cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf2 SEEK_CUR\cf0 );\
	\cf9 fread\cf0 (tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
	\cf9 fwrite\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
	\cf9 fwrite\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
\}\
\
\cf4 void\cf0  choice2(\cf5 FILE\cf0  *fp, \cf4 int\cf0  *maxFileSize, \cf7 records\cf0  *tempStruct, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst, \cf4 char\cf0  tempName[\cf6 51\cf0 ])\
\{\
	\cf4 while\cf0  (\cf9 ftell\cf0 (fp)!=*maxFileSize)\
	\{\
		\cf9 fread\cf0 (tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);	\
		namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 nameLength\cf0 );\
		addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 addressLength\cf0 );\
		\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
		\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
		\
		\cf4 if\cf0  ((\cf9 strcmp\cf0 (namest, tempName)==\cf6 0\cf0 )) \
		\{\
			\cf9 printf\cf0 (\cf3 "\\nMATCH FOUND!!\\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "Name: %s"\cf0 , namest);\
			\cf9 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
			\cf9 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , tempStruct->\cf7 phoneNumber\cf0 );\
			\cf4 break\cf0 ;	\
		\}\
	\}\
	\
	\cf4 if\cf0  ((\cf9 ftell\cf0 (fp)==*maxFileSize) && (\cf9 strcmp\cf0 (namest, tempName)!=\cf6 0\cf0 )) \
	\{\
		\cf9 printf\cf0 (\cf3 "\\nMATCH NOT FOUND!!\\n"\cf0 );\
	\}	\
	\
\}\
\
\cf4 void\cf0  choice3(\cf4 int\cf0  i, \cf4 int\cf0  *recordNum, \cf7 records\cf0  *tempStruct, \cf5 FILE\cf0  *fp, \cf4 int\cf0  *currentFileSize, \cf4 int\cf0  *maxFileSize, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst)\
\{\
	\cf4 for\cf0  (i=\cf6 1\cf0 ; i<*recordNum; i++) \
	\{\
		\cf9 fread\cf0 (tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);	\
		\cf9 fseek\cf0 (fp, +tempStruct->\cf7 nameLength\cf0 +tempStruct->\cf7 addressLength\cf0 , \cf2 SEEK_CUR\cf0 );\
	\}\
	\
	*currentFileSize=\cf9 ftell\cf0 (fp);\
	\
	\cf4 if\cf0  (*currentFileSize<*maxFileSize) \
	\{\
		\cf9 fread\cf0 (tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);		\
		namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 nameLength\cf0 );\
		addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 addressLength\cf0 );\
		\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
		\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
		\
		\cf9 printf\cf0 (\cf3 "\\nName: %s"\cf0 , namest);\
		\cf9 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
		\cf9 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , tempStruct->\cf7 phoneNumber\cf0 );\
		\
	\}\cf4 else\cf0  \
		\cf9 printf\cf0 (\cf3 "\\nRecord number too large!!\\n"\cf0 );	\
	\
\}\
\
\
\cf2 #include \cf3 <stdio.h>\cf2 \
#include \cf3 <stdlib.h>\cf2 \
#include \cf3 <ctype.h>\cf2 \
#include \cf3 <string.h>\cf2 \
\cf0 \
\cf4 typedef\cf0  \cf4 struct\cf0  employeeRecord\
\{\
	\cf4 char\cf0  *name;\
	\cf4 char\cf0  *address;\
	\cf4 short\cf0  addressLength, nameLength;\
	\cf4 int\cf0  phoneNumber;\
\}records;\
\
\cf4 void\cf0  choice1(\cf7 records\cf0  *ptr, \cf5 FILE\cf0  *fp, \cf7 records\cf0  *tempStruct, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst);\
\cf4 void\cf0  choice2(\cf5 FILE\cf0  *fp, \cf4 int\cf0  *maxFileSize, \cf7 records\cf0  *tempStruct, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst, \cf4 char\cf0  tempName[\cf6 51\cf0 ]);\
\cf4 void\cf0  choice3(\cf4 int\cf0  i, \cf4 int\cf0  *recordNum, \cf7 records\cf0  *tempStruct, \cf5 FILE\cf0  *fp, \cf4 int\cf0  *currentFileSize, \cf4 int\cf0  *maxFileSize, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst);\
\cf4 void\cf0  FreeAndExit(\cf4 int\cf0  *choices, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst, \cf4 int\cf0  *isAllocated, \cf7 records\cf0  *ptr);\
\
\cf4 int\cf0  main (\cf4 void\cf0 )\
\{	\
	\cf5 FILE\cf0  *fp;\
	\cf4 int\cf0  ch=\cf6 0\cf0 ; \
	\cf4 int\cf0  i;\
	\cf4 int\cf0  choices=\cf6 0\cf0 ;\
	\cf4 int\cf0  isAllocated;\
	\cf4 int\cf0  maxFileSize;\
	\cf4 int\cf0  recordNum;\
	\cf4 int\cf0  currentFileSize;\
	\cf7 records\cf0  *ptr;\
	\cf7 records\cf0  tempStruct;\
	\cf4 char\cf0  *namest;\
	\cf4 char\cf0  *addressst;\
	\cf4 char\cf0  tempName[\cf6 51\cf0 ];\
	\
	\cf4 while\cf0 (ch==\cf6 0\cf0 )\
	\{\
		\cf4 if\cf0  (ch==\cf6 0\cf0 ) \
		\{\
			\cf9 printf\cf0 (\cf3 "\\n1. Enter a new record. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "2. Retrieve a record by name. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "3. Retrieve a record by number. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "4. Exit \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "Enter a number from 1-4: "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ch);\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 1\cf0 ) \
		\{	\
			\cf9 getchar\cf0 ();\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "ab+"\cf0 );\
			\
			ptr = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf7 records\cf0 ));\
			ptr->\cf7 name\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 nameLength\cf0 );\
			\
			\cf9 printf\cf0 (\cf3 "Enter the name:\\n "\cf0 );\
			\cf9 fgets\cf0 (namest, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\cf2 strcpy\cf0 (ptr->\cf7 name\cf0 , namest);\
			ptr->\cf7 nameLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 name\cf0 )+\cf6 1\cf0 ;\
			\
			ptr->\cf7 address\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf7 addressLength\cf0 );\
			\cf9 printf\cf0 (\cf3 "Enter the address:\\n "\cf0 );\
			\cf9 fgets\cf0 (addressst, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\cf2 strcpy\cf0 (ptr->\cf7 address\cf0 , addressst);\
			ptr->\cf7 addressLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 address\cf0 )+\cf6 1\cf0 ;\
			\
			\cf9 printf\cf0 (\cf3 "Enter the phone number:\\n "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ptr->\cf7 phoneNumber\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			\cf10 choice1\cf0 (ptr, fp, &tempStruct, namest, addressst);\
			\
			\cf9 printf\cf0 (\cf3 "\\nRecord Stored Successfully!!\\n"\cf0 );\
			\
			\cf9 fclose\cf0 (fp);\
			choices=choices+\cf6 1\cf0 ;\
			isAllocated=\cf6 1\cf0 ;\
			ch=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 2\cf0 ) \
		\{\
			\cf9 getchar\cf0 ();\
			\
			\cf9 printf\cf0 (\cf3 "\\nEnter a name: "\cf0 );\
			\cf9 fgets\cf0 (tempName, \cf6 51\cf0 , \cf2 stdin\cf0 );\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r+"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
			maxFileSize = \cf9 ftell\cf0 (fp);\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\
			\cf10 choice2\cf0 (fp, &maxFileSize, &tempStruct, namest, addressst, tempName);\
			\
			\cf9 fclose\cf0 (fp);\
			choices=choices+\cf6 1\cf0 ;\
			ch=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 3\cf0 ) \
		\{\
			\cf9 getchar\cf0 ();\
			\
			\cf9 printf\cf0 (\cf3 "\\nEnter a record number: \\n"\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &recordNum);\
			\cf9 fflush\cf0 (\cf2 stdin\cf0 );\
			\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
			maxFileSize = \cf9 ftell\cf0 (fp);\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\
			\cf10 choice3\cf0 (i, &recordNum, &tempStruct, fp, &currentFileSize, &maxFileSize, namest, addressst);\
			\
			\cf9 fclose\cf0 (fp);\
			choices=choices+\cf6 1\cf0 ;\
			ch=\cf6 0\cf0 ;\
		\}\
	\}\
	\
	\cf10 FreeAndExit\cf0 (&choices, namest, addressst, &isAllocated, ptr);\
	\
    \cf4 return\cf0  \cf6 0\cf0 ;\
\}\
\
\cf4 void\cf0  choice1(\cf7 records\cf0  *ptr, \cf5 FILE\cf0  *fp, \cf7 records\cf0  *tempStruct, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst)\
\{\
	\cf9 fwrite\cf0 (ptr, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
	\cf9 fseek\cf0 (fp, -\cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf2 SEEK_CUR\cf0 );\
	\cf9 fread\cf0 (tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
	\cf9 fwrite\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
	\cf9 fwrite\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
\}\
\
\cf4 void\cf0  choice2(\cf5 FILE\cf0  *fp, \cf4 int\cf0  *maxFileSize, \cf7 records\cf0  *tempStruct, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst, \cf4 char\cf0  tempName[\cf6 51\cf0 ])\
\{\
	\cf4 while\cf0  (\cf9 ftell\cf0 (fp)!=*maxFileSize)\
	\{\
		\cf9 fread\cf0 (tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);	\
		namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 nameLength\cf0 );\
		addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 addressLength\cf0 );\
		\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
		\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
		\
		\cf4 if\cf0  ((\cf9 strcmp\cf0 (namest, tempName)==\cf6 0\cf0 )) \
		\{\
			\cf9 printf\cf0 (\cf3 "\\nMATCH FOUND!!\\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "Name: %s"\cf0 , namest);\
			\cf9 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
			\cf9 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , tempStruct->\cf7 phoneNumber\cf0 );\
			\cf4 break\cf0 ;	\
		\}\
	\}\
	\
	\cf4 if\cf0  ((\cf9 ftell\cf0 (fp)==*maxFileSize) && (\cf9 strcmp\cf0 (namest, tempName)!=\cf6 0\cf0 )) \
	\{\
		\cf9 printf\cf0 (\cf3 "\\nMATCH NOT FOUND!!\\n"\cf0 );\
	\}	\
	\
\}\
\
\cf4 void\cf0  choice3(\cf4 int\cf0  i, \cf4 int\cf0  *recordNum, \cf7 records\cf0  *tempStruct, \cf5 FILE\cf0  *fp, \cf4 int\cf0  *currentFileSize, \cf4 int\cf0  *maxFileSize, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst)\
\{\
	\cf4 for\cf0  (i=\cf6 1\cf0 ; i<*recordNum; i++) \
	\{\
		\cf9 fread\cf0 (tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);	\
		\cf9 fseek\cf0 (fp, +tempStruct->\cf7 nameLength\cf0 +tempStruct->\cf7 addressLength\cf0 , \cf2 SEEK_CUR\cf0 );\
	\}\
	\
	*currentFileSize=\cf9 ftell\cf0 (fp);\
	\
	\cf4 if\cf0  (*currentFileSize<*maxFileSize) \
	\{\
		\cf9 fread\cf0 (tempStruct, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);		\
		namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 nameLength\cf0 );\
		addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 addressLength\cf0 );\
		\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
		\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct->\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
		\
		\cf9 printf\cf0 (\cf3 "\\nName: %s"\cf0 , namest);\
		\cf9 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
		\cf9 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , tempStruct->\cf7 phoneNumber\cf0 );\
		\
	\}\cf4 else\cf0  \
		\cf9 printf\cf0 (\cf3 "\\nRecord number too large!!\\n"\cf0 );	\
	\
\}\
\
\cf4 void\cf0  FreeAndExit(\cf4 int\cf0  *choices, \cf4 char\cf0  *namest, \cf4 char\cf0  *addressst, \cf4 int\cf0  *isAllocated, \cf7 records\cf0  *ptr)\
\{\
	\cf4 if\cf0  (*choices>=\cf6 1\cf0 ) \
	\{\
		namest=\cf4 NULL\cf0 ;\
		addressst=\cf4 NULL\cf0 ;\
		\
		\cf4 if\cf0  (*isAllocated==\cf6 1\cf0 ) \
		\{\
			\cf9 free\cf0 (ptr->\cf7 name\cf0 );\
			\cf9 free\cf0 (ptr->\cf7 address\cf0 );\
			\cf9 free\cf0 (ptr);\
		\}\
	\}		\
\}\
\
\
}