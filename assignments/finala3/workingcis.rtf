{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf250
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red196\green26\blue22;\red170\green13\blue145;
\red92\green38\blue153;\red28\green0\blue207;\red63\green110\blue116;\red0\green116\blue0;\red46\green13\blue110;
}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab560
\pard\tx560\pardeftab560\ql\qnatural\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 #include \cf3 <stdio.h>\cf2 \
#include \cf3 <stdlib.h>\cf2 \
#include \cf3 <ctype.h>\cf2 \
#include \cf3 <string.h>\cf2 \
\cf0 \
\cf4 typedef\cf0  \cf4 struct\cf0  employeeRecord\
\{\
	\cf4 char\cf0  *name;\
	\cf4 char\cf0  *address;\
	\cf4 short\cf0  addressLength, nameLength;\
	\cf4 int\cf0  phoneNumber;\
\}records;\
\
\cf4 int\cf0  main (\cf4 void\cf0 )\
\{	\
	\cf5 FILE\cf0  *fp;\
	\cf4 int\cf0  i=\cf6 0\cf0 ,x;\
	\cf4 char\cf0  namest[\cf6 50\cf0 ], addressst[\cf6 50\cf0 ], ch=\cf6 5\cf0 ;\
	\cf7 records\cf0  *ptr;\
	\cf7 records\cf0  b;\
	\
\
	\cf8 //printf("1. Enter a new record. \\n");\cf0 \
	\cf8 //printf("2. Retrieve a record by name. \\n");\cf0 \
	\cf8 //printf("3. Retrieve a record by number. \\n");\cf0 \
	\cf8 //printf("4. Exit \\n");\cf0 \
	\cf8 //printf("Enter a number from 1-4: ");\cf0 \
	\cf8 //scanf("%c", &ch);\cf0 \
	\
	\
	\cf8 //if ( (fp = fopen("employeeRecords.txt", "r+")) == NULL)\cf0 \
	\cf8 //\{\cf0 \
		fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "ab+"\cf0 );\
	\cf8 //\}\cf0 \
	\cf8 //else\cf0 \
	\cf8 //\{\cf0 \
	\cf8 //	fp = fopen("employeeRecords", "r+");\cf0 \
	\cf8 //\}\cf0 \
	\
	ptr = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf7 records\cf0 ));\
	ptr->\cf7 name\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
	\cf9 printf\cf0 (\cf3 "Enter the name:\\n "\cf0 );\
	\cf9 fgets\cf0 (namest, \cf6 100\cf0 , \cf2 stdin\cf0 );\
	\cf2 strcpy\cf0 (ptr->\cf7 name\cf0 , namest);\
	ptr->\cf7 nameLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 name\cf0 );\
	\
	\cf8 //printf("%d", ptr->nameLength);\cf0 \
	\cf8 //printf("%s", ptr->name);\cf0 \
	\
	ptr->\cf7 address\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
	\cf9 printf\cf0 (\cf3 "Enter the address:\\n "\cf0 );\
	\cf9 fgets\cf0 (addressst, \cf6 100\cf0 , \cf2 stdin\cf0 );\
	\cf2 strcpy\cf0 (ptr->\cf7 address\cf0 , addressst);\
	ptr->\cf7 addressLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 address\cf0 );\
	\cf8 //printf("%d", ptr->addressLength);\cf0 \
	\cf8 //printf("%s", ptr->address);\cf0 \
	\
	\cf9 printf\cf0 (\cf3 "Enter the phone number:\\n "\cf0 );\
	\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ptr->\cf7 phoneNumber\cf0 );\
	\cf8 //printf("%d", ptr->phoneNumber);\cf0 \
	\
	\cf9 fwrite\cf0 (ptr, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
	\cf9 fwrite\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*\cf6 50\cf0 , \cf6 1\cf0 , fp);\
	\cf9 fwrite\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*\cf6 50\cf0 , \cf6 1\cf0 , fp);\
\
	\cf9 fclose\cf0 (fp);\
\
	\
	fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "rb+"\cf0 );\
	\cf9 fseek\cf0 (fp, (+\cf4 sizeof\cf0 (\cf7 records\cf0 )+\cf4 sizeof\cf0 (\cf4 char\cf0 )*\cf6 50\cf0 +\cf4 sizeof\cf0 (\cf4 char\cf0 )*\cf6 50\cf0 ), \cf2 SEEK_CUR\cf0 );\
	\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
	\cf8 //b.name = malloc(sizeof(char)*ptr->nameLength);\cf0 \
	\cf8 //b.address = malloc(sizeof(char)*ptr->addressLength);\cf0 \
	\cf8 //fread(ptr->name, sizeof(char), ptr->addressLength, fp);\cf0 \
	\cf8 //fread(&b.phoneNumber, sizeof(int), 1, fp);\cf0 \
	\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*\cf6 50\cf0 , \cf6 1\cf0 , fp);\
	\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*\cf6 50\cf0 , \cf6 1\cf0 , fp);\
\
	\cf2 strcpy\cf0 (b.\cf7 name\cf0 , namest);\
	\cf2 strcpy\cf0 (b.\cf7 address\cf0 , addressst);\
	\cf9 fclose\cf0 (fp);\
	\cf9 printf\cf0 (\cf3 "%s %s %d\\n"\cf0 , b.\cf7 name\cf0 , b.\cf7 address\cf0 , b.\cf7 phoneNumber\cf0 );\
	\cf9 printf\cf0 (\cf3 "%s"\cf0 , namest);\
	\cf9 printf\cf0 (\cf3 "%s"\cf0 , addressst);\
		\
	\
    \cf4 return\cf0  \cf6 0\cf0 ;\
\}\
\
\
\
\
\cf9 fwrite\cf0 (ptr, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
				\cf9 fseek\cf0 (fp, -\cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf2 SEEK_CUR\cf0 );\
				\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
\
				\cf8 //namest = malloc(sizeof(char)*ptr->nameLength);\cf0 \
				\cf8 //ptr = malloc(sizeof(char)*ptr->addressLength);\cf0 \
				\cf8 //fseek(fp, sizeof(records), SEEK_CUR);\cf0 \
				\cf9 fwrite\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 fwrite\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
				\cf8 //fclose(fp);\cf0 \
				\
				\
				\cf8 //fp = fopen("employeeRecords", "rb+");\cf0 \
				\cf9 fseek\cf0 (fp, (+\cf4 sizeof\cf0 (\cf7 records\cf0 )+\cf4 sizeof\cf0 (\cf4 char\cf0 )*\cf6 50\cf0 +\cf4 sizeof\cf0 (\cf4 char\cf0 )*\cf6 50\cf0 ), \cf2 SEEK_SET\cf0 );\
				\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
				\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
				\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
				\
				\cf8 //strcpy(b.name, namest);\cf0 \
				\cf9 printf\cf0 (\cf3 "error\\n"\cf0 );\
\
			\cf8 //	strcpy(b.address, addressst);\
\
\
\
\cf2 #include \cf3 <stdio.h>\cf2 \
#include \cf3 <stdlib.h>\cf2 \
#include \cf3 <ctype.h>\cf2 \
#include \cf3 <string.h>\cf2 \
\cf0 \
\cf4 typedef\cf0  \cf4 struct\cf0  employeeRecord\
\{\
	\cf4 char\cf0  *name;\
	\cf4 char\cf0  *address;\
	\cf4 short\cf0  addressLength, nameLength;\
	\cf4 int\cf0  phoneNumber;\
\}records;\
\
\cf4 int\cf0  main (\cf4 void\cf0 )\
\{	\
	\cf5 FILE\cf0  *fp;\
	\cf4 int\cf0  ch=\cf6 0\cf0 ;\
	\cf7 records\cf0  *ptr;\
	\cf7 records\cf0  b;\
	\cf4 char\cf0  *namest;\
	\cf4 char\cf0  *addressst;\
	\
	\
	\
	\
	\
	\cf4 while\cf0 (ch==\cf6 0\cf0 )\
	\{\
		\cf4 if\cf0  (ch==\cf6 0\cf0 ) \
		\{\
			\cf9 printf\cf0 (\cf3 "1. Enter a new record. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "2. Retrieve a record by name. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "3. Retrieve a record by number. \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "4. Exit \\n"\cf0 );\
			\cf9 printf\cf0 (\cf3 "Enter a number from 1-4: "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ch);\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 1\cf0 ) \
		\{	\
			\cf9 getchar\cf0 ();\
			\cf8 //if ( (fp = fopen("employeeRecords.txt", "r+")) == NULL)\cf0 \
			\cf8 //\{\cf0 \
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "ab+"\cf0 );\
			\cf8 //\}\cf0 \
			\cf8 //else\cf0 \
			\cf8 //\{\cf0 \
			\cf8 //	fp = fopen("employeeRecords", "r+");\cf0 \
			\cf8 //\}\cf0 \
			\
			ptr = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf7 records\cf0 ));\
			ptr->\cf7 name\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			\
			namest = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 );\
\
\
			\cf9 printf\cf0 (\cf3 "Enter the name:\\n "\cf0 );\
			\cf9 fgets\cf0 (namest, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf2 strcpy\cf0 (ptr->\cf7 name\cf0 , namest);\
			ptr->\cf7 nameLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 name\cf0 );\
			\
			\cf8 //printf("%d", ptr->nameLength);\cf0 \
			\cf8 //printf("%s", ptr->name);\cf0 \
			\
			ptr->\cf7 address\cf0  = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
			\
			addressst = \cf9 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 );\
\
			\cf9 printf\cf0 (\cf3 "Enter the address:\\n "\cf0 );\
			\cf9 fgets\cf0 (addressst, \cf6 100\cf0 , \cf2 stdin\cf0 );\
			\cf2 strcpy\cf0 (ptr->\cf7 address\cf0 , addressst);\
			ptr->\cf7 addressLength\cf0  = \cf9 strlen\cf0 (ptr->\cf7 address\cf0 );\
			\cf8 //printf("%d", ptr->addressLength);\cf0 \
			\cf8 //printf("%s", ptr->address);\cf0 \
			\
			\cf9 printf\cf0 (\cf3 "Enter the phone number:\\n "\cf0 );\
			\cf9 scanf\cf0 (\cf3 "%d"\cf0 , &ptr->\cf7 phoneNumber\cf0 );\
			\cf8 //printf("%d", ptr->phoneNumber);\cf0 \
			\
			\
			\cf9 fwrite\cf0 (ptr, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
		\cf8 //	fseek(fp, -sizeof(records), SEEK_CUR);\cf0 \
		\cf8 //	fread(&b, sizeof(records), 1, fp);\cf0 \
			\
			\cf8 //addressst = malloc(sizeof(char)*b.addressLength);\cf0 \
			\cf8 //ptr = malloc(sizeof(char)*ptr->addressLength);\cf0 \
			\cf8 //fseek(fp, sizeof(records), SEEK_CUR);\cf0 \
			\cf9 fwrite\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
			\cf9 fwrite\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
			\cf9 fclose\cf0 (fp);\
			\
			\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "ab+"\cf0 );\
			\cf9 fseek\cf0 (fp, -\cf6 0L\cf0 , \cf2 SEEK_END\cf0 );\
\
			\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
			\cf9 fseek\cf0 (fp, (-\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 -\cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 ), \cf2 SEEK_CUR\cf0 );	\
\
			\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
			\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
			\
\
			\cf8 //fread(&b, sizeof(records), 1, fp);\cf0 \
			\
			\cf8 //fread(namest, sizeof(char)*ptr->nameLength, 1, fp);\cf0 \
			\cf8 //fread(addressst, sizeof(char)*ptr->addressLength, 1, fp);\cf0 \
			\
			\cf2 strcpy\cf0 (namest, b.\cf7 name\cf0 );			\
			\cf2 strcpy\cf0 (addressst, b.\cf7 address\cf0 );\
			\cf9 fclose\cf0 (fp);\
			\cf9 printf\cf0 (\cf3 "%s %s %d\\n"\cf0 , b.\cf7 name\cf0 , b.\cf7 address\cf0 , b.\cf7 phoneNumber\cf0 );\
			\cf9 printf\cf0 (\cf3 "%s\\n"\cf0 , namest);\
			\cf9 printf\cf0 (\cf3 "%s\\n"\cf0 , addressst);\
			\cf9 printf\cf0 (\cf3 "%d\\n"\cf0 , b.\cf7 nameLength\cf0 );\
			\cf9 printf\cf0 (\cf3 "%d\\n"\cf0 , b.\cf7 addressLength\cf0 );\
			\
			ch=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 2\cf0 ) \
		\{\
			\cf9 printf\cf0 (\cf3 "do #2\\n"\cf0 );\
			ch=\cf6 0\cf0 ;\
		\}\
		\
		\cf4 if\cf0  (ch==\cf6 3\cf0 ) \
		\{\
			\cf9 printf\cf0 (\cf3 "do #3\\n"\cf0 );\
			ch=\cf6 0\cf0 ;\
		\}\
		\
	\}\
    \cf4 return\cf0  \cf6 0\cf0 ;\
\}\
\
\
\
\
\
\
\
\
			fp = \cf9 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "ab+"\cf0 );\
			\cf9 fseek\cf0 (fp, \cf6 0L\cf0 , \cf2 SEEK_SET\cf0 );\
			\cf8 //fseek(fp, (-sizeof(records)-sizeof(char)*b.nameLength-sizeof(char)*b.addressLength), SEEK_END);\cf0 \
\
			\
			\cf9 fread\cf0 (&b, \cf4 sizeof\cf0 (\cf7 records\cf0 ), \cf6 1\cf0 , fp);\
		\cf8 //	fseek(fp, (sizeof(char)*b.nameLength+sizeof(char)*b.addressLength), SEEK_CUR);\cf0 \
			\
			\cf9 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 nameLength\cf0 , \cf6 1\cf0 , fp);\
			\cf9 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*b.\cf7 addressLength\cf0 , \cf6 1\cf0 , fp);\
\
}