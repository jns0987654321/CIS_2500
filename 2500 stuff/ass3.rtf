{\rtf1\ansi\ansicpg1252\cocoartf1038\cocoasubrtf250
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red100\green56\blue32;\red196\green26\blue22;\red170\green13\blue145;
\red63\green110\blue116;\red92\green38\blue153;\red28\green0\blue207;\red46\green13\blue110;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab560
\pard\tx560\pardeftab560\ql\qnatural\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 #include \cf3 <stdio.h>\cf2 \
#include \cf3 <stdlib.h>\cf2 \
#include \cf3 <ctype.h>\cf2 \
#include \cf3 <string.h>\cf2 \
\cf0 \
\cf4 void\cf0  NewRecord();\
\cf4 void\cf0  RetrieveByName();\
\cf4 void\cf0  RetrieveByNum();\
\cf4 void\cf0  ExitAndFree();\
\
\cf4 typedef\cf0  \cf4 struct\cf0  employeeRecord\
\{\
	\cf4 char\cf0  *name;\
	\cf4 char\cf0  *address;\
	\cf4 short\cf0  addressLength, nameLength;\
	\cf4 int\cf0  phoneNumber;\
\}records;\
\
\cf4 int\cf0  main (\cf4 void\cf0 )\
\{	\
	\cf5 records\cf0  *ptr;\
	\cf5 records\cf0  tempStruct;\
	\cf6 FILE\cf0  *fp;\
	\cf4 int\cf0  ch=\cf7 0\cf0 , \
	\cf4 int\cf0  i;\
	\cf4 int\cf0  choices=\cf7 0\cf0 ;\
	\cf4 int\cf0  isAllocated;\
	\cf4 int\cf0  maxFileSize;\
	\cf4 int\cf0  recordNum;\
	\cf4 int\cf0  currentFileSize;\
	\cf4 char\cf0  *namest;\
	\cf4 char\cf0  *addressst;\
	\cf4 char\cf0  tempName[\cf7 51\cf0 ];\
	\
	\cf4 while\cf0 (ch==\cf7 0\cf0 )\
	\{\
		\cf4 if\cf0  (ch==\cf7 0\cf0 ) \
		\{\
			\cf8 printf\cf0 (\cf3 "\\n1. Enter a new record. \\n"\cf0 );\
			\cf8 printf\cf0 (\cf3 "2. Retrieve a record by name. \\n"\cf0 );\
			\cf8 printf\cf0 (\cf3 "3. Retrieve a record by number. \\n"\cf0 );\
			\cf8 printf\cf0 (\cf3 "4. Exit \\n"\cf0 );\
			\cf8 printf\cf0 (\cf3 "Enter a number from 1-4: "\cf0 );\
			\cf8 scanf\cf0 (\cf3 "%d"\cf0 , &ch);\
			\cf8 fflush\cf0 (\cf2 stdin\cf0 );\
		\}\
		\
		\cf4 if\cf0  (ch==\cf7 1\cf0 ) \
		\{	\
			NewRecord();\
		\}\
		\
		\cf4 if\cf0  (ch==\cf7 2\cf0 ) \
		\{\
			RetrieveByName();\
		\}\
		\
		\cf4 if\cf0  (ch==\cf7 3\cf0 ) \
		\{\
			RetrieveByNum();\
		\}\
		\
	\}\
	\
	ExitAndFree();	\
\}\
\
\cf4 void\cf0  NewRecord()\
\{\
	\cf8 getchar\cf0 ();\
	\
	fp = \cf8 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "ab+"\cf0 );\
	\
	ptr = \cf8 malloc\cf0 (\cf4 sizeof\cf0 (\cf5 records\cf0 ));\
	ptr->\cf5 name\cf0  = \cf8 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
	namest = \cf8 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf5 nameLength\cf0 );\
	\
	\
	\cf8 printf\cf0 (\cf3 "Enter the name:\\n "\cf0 );\
	\cf8 fgets\cf0 (namest, \cf7 100\cf0 , \cf2 stdin\cf0 );\
	\cf8 fflush\cf0 (\cf2 stdin\cf0 );\
	\cf2 strcpy\cf0 (ptr->\cf5 name\cf0 , namest);\
	ptr->\cf5 nameLength\cf0  = \cf8 strlen\cf0 (ptr->\cf5 name\cf0 )+\cf7 1\cf0 ;\
	\
	ptr->\cf5 address\cf0  = \cf8 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 ));\
	\
	addressst = \cf8 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf5 addressLength\cf0 );\
	\
	\cf8 printf\cf0 (\cf3 "Enter the address:\\n "\cf0 );\
	\cf8 fgets\cf0 (addressst, \cf7 100\cf0 , \cf2 stdin\cf0 );\
	\cf8 fflush\cf0 (\cf2 stdin\cf0 );\
	\
	\cf2 strcpy\cf0 (ptr->\cf5 address\cf0 , addressst);\
	ptr->\cf5 addressLength\cf0  = \cf8 strlen\cf0 (ptr->\cf5 address\cf0 )+\cf7 1\cf0 ;\
	\
	\cf8 printf\cf0 (\cf3 "Enter the phone number:\\n "\cf0 );\
	\cf8 scanf\cf0 (\cf3 "%d"\cf0 , &ptr->\cf5 phoneNumber\cf0 );\
	\cf8 fflush\cf0 (\cf2 stdin\cf0 );\
	\
	\cf8 fwrite\cf0 (ptr, \cf4 sizeof\cf0 (\cf5 records\cf0 ), \cf7 1\cf0 , fp);\
	\cf8 fseek\cf0 (fp, -\cf4 sizeof\cf0 (\cf5 records\cf0 ), \cf2 SEEK_CUR\cf0 );\
	\cf8 fread\cf0 (&tempStruct, \cf4 sizeof\cf0 (\cf5 records\cf0 ), \cf7 1\cf0 , fp);\
	\
	\cf8 fwrite\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf5 nameLength\cf0 , \cf7 1\cf0 , fp);\
	\cf8 fwrite\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf5 addressLength\cf0 , \cf7 1\cf0 , fp);\
	\
	\cf8 printf\cf0 (\cf3 "\\nRecord Stored Successfully!!\\n"\cf0 );\
	\
	\cf8 fclose\cf0 (fp);\
	\
	choices++;\
	isAllocated=\cf7 1\cf0 ;\
	ch=\cf7 0\cf0 ;\
\}\
\
\
\cf4 void\cf0  RetrieveByName()\
\{\
	\cf8 getchar\cf0 ();\
	\
	\cf8 printf\cf0 (\cf3 "\\nEnter a name: "\cf0 );\
	\cf8 fgets\cf0 (tempName, \cf7 51\cf0 , \cf2 stdin\cf0 );\
	\cf8 fflush\cf0 (\cf2 stdin\cf0 );\
	\
	\
	fp = \cf8 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r+"\cf0 );\
	\cf8 fseek\cf0 (fp, \cf7 0L\cf0 , \cf2 SEEK_END\cf0 );\
	maxFileSize = \cf8 ftell\cf0 (fp);\
	\cf8 fseek\cf0 (fp, \cf7 0L\cf0 , \cf2 SEEK_SET\cf0 );\
	\
	\cf4 while\cf0  (\cf8 ftell\cf0 (fp)!=maxFileSize)\
	\{\
		\cf8 fread\cf0 (&tempStruct, \cf4 sizeof\cf0 (\cf5 records\cf0 ), \cf7 1\cf0 , fp);	\
		\
		namest = \cf8 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf5 nameLength\cf0 );\
		addressst = \cf8 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf5 addressLength\cf0 );\
		\
		\cf8 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf5 nameLength\cf0 , \cf7 1\cf0 , fp);\
		\cf8 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf5 addressLength\cf0 , \cf7 1\cf0 , fp);\
		\
		\cf4 if\cf0  ((\cf8 strcmp\cf0 (namest, tempName)==\cf7 0\cf0 )) \
		\{\
			\cf8 printf\cf0 (\cf3 "\\nMATCH FOUND!!\\n"\cf0 );\
			\cf8 printf\cf0 (\cf3 "Name: %s"\cf0 , namest);\
			\cf8 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
			\cf8 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , tempStruct.\cf5 phoneNumber\cf0 );\
			\cf4 break\cf0 ;	\
		\}\
	\}\
	\
	\cf4 if\cf0  ((\cf8 ftell\cf0 (fp)==maxFileSize) && (\cf8 strcmp\cf0 (namest, tempName)!=\cf7 0\cf0 )) \{\
		\cf8 printf\cf0 (\cf3 "\\nMATCH NOT FOUND!!\\n"\cf0 );\
	\}\
	\
	\cf8 fclose\cf0 (fp);\
	\
	choices++;\
	ch=\cf7 0\cf0 ;	\
\}\
\
\
\cf4 void\cf0  RetrieveByNum()\
\{\
	\cf8 getchar\cf0 ();\
	\
	\cf8 printf\cf0 (\cf3 "\\nEnter a record number: \\n"\cf0 );\
	\cf8 scanf\cf0 (\cf3 "%d"\cf0 , &recordNum);\
	\cf8 fflush\cf0 (\cf2 stdin\cf0 );\
	\
	fp = \cf8 fopen\cf0 (\cf3 "employeeRecords"\cf0 , \cf3 "r"\cf0 );\
	\cf8 fseek\cf0 (fp, \cf7 0L\cf0 , \cf2 SEEK_END\cf0 );\
	maxFileSize = \cf8 ftell\cf0 (fp);\
	\cf8 fseek\cf0 (fp, \cf7 0L\cf0 , \cf2 SEEK_SET\cf0 );\
	\
	\cf4 for\cf0  (i=\cf7 1\cf0 ; i<recordNum; i++) \
	\{\
		\cf8 fread\cf0 (&tempStruct, \cf4 sizeof\cf0 (\cf5 records\cf0 ), \cf7 1\cf0 , fp);	\
		\cf8 fseek\cf0 (fp, +tempStruct.\cf5 nameLength\cf0 +tempStruct.\cf5 addressLength\cf0 , \cf2 SEEK_CUR\cf0 );\
	\}\
	\
	currentFileSize=\cf8 ftell\cf0 (fp);\
	\
	\cf4 if\cf0  (currentFileSize<maxFileSize) \
	\{\
		\cf8 fread\cf0 (&tempStruct, \cf4 sizeof\cf0 (\cf5 records\cf0 ), \cf7 1\cf0 , fp);		\
		\
		namest = \cf8 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf5 nameLength\cf0 );\
		addressst = \cf8 malloc\cf0 (\cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf5 addressLength\cf0 );\
		\
		\cf8 fread\cf0 (namest, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf5 nameLength\cf0 , \cf7 1\cf0 , fp);\
		\cf8 fread\cf0 (addressst, \cf4 sizeof\cf0 (\cf4 char\cf0 )*tempStruct.\cf5 addressLength\cf0 , \cf7 1\cf0 , fp);\
		\cf8 printf\cf0 (\cf3 "\\nName: %s"\cf0 , namest);\
		\cf8 printf\cf0 (\cf3 "Address: %s"\cf0 , addressst);\
		\cf8 printf\cf0 (\cf3 "Telephone Number: %d\\n"\cf0 , tempStruct.\cf5 phoneNumber\cf0 );\
	\}\cf4 else\cf0  \
		\cf8 printf\cf0 (\cf3 "\\nRecord number too large!!\\n"\cf0 );\
	\
	choices++;\
	ch=\cf7 0\cf0 ;\
\}\
\
\
\cf4 void\cf0  ExitAndFree()\
\{\
	\cf4 if\cf0  (choices>=\cf7 1\cf0 ) \
	\{\
		\cf8 free\cf0 (namest);\
		\cf8 free\cf0 (addressst);\
		\cf4 if\cf0  (isAllocated==\cf7 1\cf0 ) \
		\{\
			\cf8 free\cf0 (ptr->\cf5 name\cf0 );\
			\cf8 free\cf0 (ptr->\cf5 address\cf0 );\
			\cf8 free\cf0 (ptr);\
		\}\
	\}\
	\
	 \cf4 return\cf0  \cf7 0\cf0 ;\
\}\
\
}